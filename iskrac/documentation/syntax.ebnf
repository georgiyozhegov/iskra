Module = { Declaration };

(* Declaration *)

Declaration = Constant | Function;

Constant = "let", Identifier, "=", Expression;

Function = "function", Identifier, "(", ")", FunctionBody;

FunctionBody = "do", { Statement }, "end";

(* Statement *)

Statement = Let | Assign | While;

Let = "let", [ "mutable" ], Identifier, "=", Expression;

Assign = Identifier, ( "=" | "-=" ), Expression;

While = "while", Expression, Block;

Block = "{", { Statement }, "}";

(* Expression *)

Expression = Identifier | Integer | Parenthesized | Binary;

Identifier = Alphabetic, { Alphabetic | Numeric };

Alphabetic = "_" | "a" | ... | "z" | "A" | ... | "Z";

Integer = [ "-" ], Numeric, { Numeric };

Numeric = "0" | ... | "9";

Parenthesized = "(", Expression, ")";

Binary = Expression, BinaryOperator, Expression;

BinaryOperator = "+" | "-" | "*" | ">";
